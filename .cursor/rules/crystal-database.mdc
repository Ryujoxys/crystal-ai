---
description: 
globs: 
alwaysApply: false
---
# Crystal AI 水晶数据结构

本项目使用两种方式存储水晶数据：

1. 本地JavaScript对象数组，位于[crystalDatabase.js](mdc:crystalDatabase.js)
2. Supabase数据库表，按照以下结构设计

## 水晶对象结构

```javascript
{
  id: 数字,                        // 水晶ID
  name: 字符串,                    // 水晶中文名称
  englishName: 字符串,             // 水晶英文名称
  image: 字符串,                   // 水晶图片URL
  description: 字符串,             // 水晶描述
  benefits: 字符串数组,            // 功效列表
  elements: 字符串数组,            // 关联五行元素
  compatibility: 字符串数组,       // 兼容时辰
  chakra: 字符串,                  // 关联脉轮
  color: 字符串,                   // 颜色
  hardness: 字符串,                // 硬度
  transparency: 字符串,            // 透明度
  origin: 字符串数组,              // 产地
  usage: 字符串数组,               // 使用方法
  energyTransfer: {                // 能量转化方式
    cleansing: 字符串数组,         // 净化方法
    charging: 字符串数组,          // 充能方法
    activation: 字符串             // 激活方法
  },
  combinations: 字符串数组,        // 推荐组合
  suitableFor: 字符串数组,         // 适合人群
  zodiac: 字符串数组,              // 适合星座
  energyLevel: 数字                // 能量级别(1-10)
}
```

## Supabase表结构

```sql
create table crystals (
  id bigint primary key,
  name text not null,
  englishName text,
  image text,
  description text,
  benefits text[] default '{}',
  elements text[] default '{}',
  compatibility text[] default '{}',
  chakra text,
  color text,
  hardness text,
  transparency text,
  origin text[] default '{}',
  usage text[] default '{}',
  energyTransfer jsonb,
  combinations text[] default '{}',
  suitableFor text[] default '{}',
  zodiac text[] default '{}',
  energyLevel int
);

-- 全文搜索索引
create index crystals_name_idx on crystals using gin(name gin_trgm_ops);
create index crystals_description_idx on crystals using gin(description gin_trgm_ops);
create index crystals_benefits_idx on crystals using gin(benefits gin_trgm_ops);
```

## 推荐算法

[crystalDatabase.js](mdc:crystalDatabase.js)中实现了几种不同的推荐算法：

1. **五行匹配算法** - 基于用户八字五行属性进行推荐
2. **需求匹配算法** - 基于用户诉求与水晶功效匹配
3. **综合评分算法** - 结合五行匹配和需求匹配的加权评分
4. **能量互补算法** - 推荐能量互补的水晶组合

## 数据访问模式

- 前端通过API请求获取水晶推荐
- 服务器从本地数据库或Supabase获取水晶数据
- 算法计算匹配度并返回排序后的推荐结果

## 自定义水晶推荐

系统支持通过以下方式实现自定义推荐：
- 调整五行和需求的权重参数
- 设置特定水晶的优先级
- 排除特定水晶
